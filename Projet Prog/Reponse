//===================================================REPONSES=============================================================

======================================================SEMAINE 2===========================================================

[Question P1.1] Comment représentez-vous ces vecteurs ? Comment sont-ils organisés : quels attributs ? quelles méthodes ? quels droits d'accès ?

Réponse :

Nos vecteurs sont representés par un tableau permettant de stocker chaque coordonnées. Par souci de clarté et pour simplifier l'ecriture nous avons defini un typedef coord qui initialise un tableau sans dimension (car la dimesion peut varier d'un vecteur à l'autre).
Pour conserver l'encapsulation nous avons placé les attributs en "private" le seul attribut étant le tableau de coordonnés. En revanche comme toutes nos methodes (augment(), set coord(), affiche() ou compare()) ont pour but d'être maniées par l'utilisateur nous les avons placé en public.

[Question P1.2] Quel choix avez vous fait pour les opérations entre vecteurs de dimensions différentes ?

Réponse :

Pour les opérations entre vecteurs de dimensions différente nous avons décidé que ce sera la vecteur ayant la plus petite dimension qui determinera toute fin d'iteration (boucle for pour acceder a chaque coordonnées d'un vecteur) car cela nous assure d'éviter des "segmentation fault" l'accé a des cases d'un tableau qui n'existe pas. Dans la pratique nous avons fait appel a la bibliothèque <cmath> pour faire appel a la fonction fmin qui compare les dimensions et renvoit la plus petite. Ce choix s'applique pour les fonctions addition, soustraction. Pour le produit vectoriel en revanche nous utilisons la gestion d'erreur try, throw, catch car nous sommes dans le cas particulier ou il n'y a que la dimension 3 possible. Ainsi si l'utilisateur rentre n'importe quelle autre dimension il recevra un message d'erreur et la fonction ne sera pas executé.

//=================================================SEMAINE 4==============================================================

[Question P4.1] Avez-vous ajouté un constructeur de copie ? Pourquoi (justifiez votre choix) ?

Réponse :

Nous avons jugé utile de définir un constructeur de copie dans le cas par exemple ou l'on souhaite echangé les coordonnés entre 2 vecteurs nous pourrions aisni définir un 3ème vecteurs de transitions pour réaliser cette tache. De plus ce choix est appuyé par le fait que nous n'avons pas de constrcteur de copie par defaut car nous avec crée d'autres constrcteurs.

[Question P4.2] Si l'on souhaitait ajouter un constructeur par coordonnées sphériques (deux angles et une longueur) pour les vecteurs de dimension 3,
a] que cela impliquerait-il au niveau des attributs de la classe ?
b] quelle serait la difficulté majeure (voire l'impossibilité) de sa réalisation en C++ ? (C'est d'ailleurs pour cela qu'on ne vous demande pas de faire un tel constructeur !)

Réponse :

a] Au niveau des attributs de la classe cela ne changerait rien les informations concernant un vecteur seront toujours stockés dans un tableau comme elles doievent l'être (car il y en plusieurs) par consequent la manière d'utiliser les attributs ne change pas.

b] La difficulté majeure serait d'adapter les methodes à ce choix du programmeur car si les coordonnés cartésiennes sont adaptés pour des opérations comme la somme ou même la multiplication par un scalaire les coordonnées sphériques le sont moins et le code que nous avons ecrit ecrit pour l'addition de 2 vecteurs en coordonnés cartésienne ne s'applique pas au sphérique (les anles ne s'additionnent pas) par exemple. Ainsi il faudra repenser et recoder nos methodes pour qu'elles réalisent toujours ce pour quoi ont les a définis (l'addition de vecteur par exemple).

[Question P4.3] Quels opérateurs avez vous introduits ?

Réponse :

Nous avons introduit des opérateurs internes et externes à la classe.
Les opérateurs internes sont :
==, +=, -=, *=, *, /=
Ces opérateurs sont definis en interne car ce sont des methodes de la classe et surtout ils ne créent pas de nouvelle instance mais modifie sa première opérande, ils necessitent donc un accés interne.
Ensuite nous avons crée les opérateurs suivants :

+,-, !=, *,
Ces opérateurs sont externes car ils créent une nouvelle instance et exploitent les opérateurs internes (ex : +=) mais ne ne nécessite pas d'accés (car pas de modification):

//================================================SEMAINE 5===============================================================



